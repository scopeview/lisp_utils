(in-package :utils-test)

(lisp-unit2:define-test utils-test::match--make-matcher--string-pattern
    (:tags '(utils-test::tag-matcher))
  (let* ((pattern "hi")
	 ;; (input-1 nil)
	 ;; (input-2 "")
	 (input-3 (string-to-list "h"))
	 (input-4 (string-to-list "hi"))
	 (input-5 (string-to-list "hi--"))
	 (input-6 (string-to-list "a"))
	 (input-7 (string-to-list "ab"))
	 (input-8 (string-to-list "abc"))
	 (matcher (make-matcher :string-pattern pattern)))
    ;; (lisp-unit2:assert-eql 'partial-match (match pattern input-1))
    ;; (lisp-unit2:assert-eql 'partial-match (match pattern input-2))
    (lisp-unit2:assert-eql 'partial-match (funcall matcher input-3))
    (lisp-unit2:assert-eql 'full-match (funcall matcher input-4))
    (lisp-unit2:assert-eql 'over-match (funcall matcher input-5))
    (lisp-unit2:assert-eql 'not-match (funcall matcher input-6))
    (lisp-unit2:assert-eql 'not-match (funcall matcher input-7))
    (lisp-unit2:assert-eql 'not-match (funcall matcher input-8))))

(lisp-unit2:define-test utils-test::match--define-matcher--string-pattern
    (:tags '(utils-test::tag-matcher))
  (let* ((pattern "hi")
	 ;; (input-1 nil)
	 ;; (input-2 "")
	 (input-3 (string-to-list "h"))
	 (input-4 (string-to-list "hi"))
	 (input-5 (string-to-list "hi--"))
	 (input-6 (string-to-list "a"))
	 (input-7 (string-to-list "ab"))
	 (input-8 (string-to-list "abc")))

    (define-matcher test-matcher-fun--string-pattern :string-pattern pattern)

    ;; (lisp-unit2:assert-eql 'partial-match (match pattern input-1))
    ;; (lisp-unit2:assert-eql 'partial-match (match pattern input-2))
    (lisp-unit2:assert-eql 'partial-match (test-matcher-fun--string-pattern input-3))
    (lisp-unit2:assert-eql 'full-match (test-matcher-fun--string-pattern input-4))
    (lisp-unit2:assert-eql 'over-match (test-matcher-fun--string-pattern input-5))
    (lisp-unit2:assert-eql 'not-match (test-matcher-fun--string-pattern input-6))
    (lisp-unit2:assert-eql 'not-match (test-matcher-fun--string-pattern input-7))
    (lisp-unit2:assert-eql 'not-match (test-matcher-fun--string-pattern input-8))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; single-char-test
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(lisp-unit2:define-test utils-test::match--make-matcher--single-char-test
    (:tags '(utils-test::tag-matcher))
  (let* (;; (input-1 nil)
	 ;; (input-2 "")
	 (input-3 (string-to-list " "))
	 (input-4 (string-to-list "  "))
	 (input-5 (string-to-list " h"))
	 (input-6 (string-to-list "a"))
	 (input-7 (string-to-list "a "))
	 (input-8 (string-to-list "a  "))
	 (matcher (make-matcher :single-char-test #'utils:isspace)))
    ;; (lisp-unit2:assert-eql 'partial-match (match pattern input-1))
    ;; (lisp-unit2:assert-eql 'partial-match (match pattern input-2))
    (lisp-unit2:assert-eql 'full-match (funcall matcher input-3))
    (lisp-unit2:assert-eql 'over-match (funcall matcher input-4))
    (lisp-unit2:assert-eql 'over-match (funcall matcher input-5))
    (lisp-unit2:assert-eql 'not-match (funcall matcher input-6))
    (lisp-unit2:assert-eql 'not-match (funcall matcher input-7))
    (lisp-unit2:assert-eql 'not-match (funcall matcher input-8))))

(lisp-unit2:define-test utils-test::match--define-matcher--single-char-test
    (:tags '(utils-test::tag-matcher))
  (let* (;; (input-1 nil)
	 ;; (input-2 "")
	 (input-3 (string-to-list " "))
	 (input-4 (string-to-list "  "))
	 (input-5 (string-to-list " h"))
	 (input-6 (string-to-list "a"))
	 (input-7 (string-to-list "a "))
	 (input-8 (string-to-list "a  ")))

    (define-matcher test-matcher-fun--single-char-test :single-char-test #'utils:isspace)

    ;; (lisp-unit2:assert-eql 'partial-match (match pattern input-1))
    ;; (lisp-unit2:assert-eql 'partial-match (match pattern input-2))
    (lisp-unit2:assert-eql 'full-match (test-matcher-fun--single-char-test input-3))
    (lisp-unit2:assert-eql 'over-match (test-matcher-fun--single-char-test input-4))
    (lisp-unit2:assert-eql 'over-match (test-matcher-fun--single-char-test input-5))
    (lisp-unit2:assert-eql 'not-match (test-matcher-fun--single-char-test input-6))
    (lisp-unit2:assert-eql 'not-match (test-matcher-fun--single-char-test input-7))
    (lisp-unit2:assert-eql 'not-match (test-matcher-fun--single-char-test input-8))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; any-char-pattern
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(lisp-unit2:define-test utils-test::match--make-matcher--any-char-pattern
    (:tags '(utils-test::tag-matcher))
  (let* ((pattern "hi")
	 ;; (input-1 nil)
	 ;; (input-2 "")
	 (input-3 (string-to-list "a"))
	 (input-4 (string-to-list "b"))
	 (input-5 (string-to-list "c"))
	 (input-6 (string-to-list "d"))
	 (input-7 (string-to-list "abc"))
	 (matcher (make-matcher :any-char-pattern (list #\a #\b #\c))))
    ;; (lisp-unit2:assert-eql 'partial-match (match pattern input-1))
    ;; (lisp-unit2:assert-eql 'partial-match (match pattern input-2))
    (lisp-unit2:assert-eql 'full-match (funcall matcher input-3))
    (lisp-unit2:assert-eql 'full-match (funcall matcher input-4))
    (lisp-unit2:assert-eql 'full-match (funcall matcher input-5))
    (lisp-unit2:assert-eql 'not-match (funcall matcher input-6))
    (lisp-unit2:assert-eql 'over-match (funcall matcher input-7))))
