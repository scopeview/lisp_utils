(in-package :utils-test)

(lisp-unit2:define-test utils-test::filterate--filterate
    (:tags '(utils-test::tag-filterate))
  (let* ((pattern "hi")
	 ;; (input-1 nil)
	 (input-2 "")
	 (input-3 "h")
	 (input-4 "hi")
	 (input-5 "hi--")
	 (input-6 "a")
	 (input-7 "ab")
	 (input-8 "abc")
	 (input-9 "ha")
	 (matcher (make-matcher :string-pattern pattern)))
    ;; (lisp-unit2:assert-eql 'partial-match (match pattern input-1))
    (with-input-from-string (s input-2)
      (let ((streamer (make-instance 'cstreamer :source s)))
	(destructuring-bind (status list) (filterate streamer matcher)
	  (lisp-unit2:assert-eql 'not-filtered status)
	  (lisp-unit2:assert-eql nil list)
	  (lisp-unit2:assert-eql nil (read-char s nil nil)))))

    (with-input-from-string (s input-3)
      (let ((streamer (make-instance 'cstreamer :source s)))
	(destructuring-bind (status list) (filterate streamer matcher)
	  (lisp-unit2:assert-eql 'not-filtered status)
	  (lisp-unit2:assert-eql nil list)
	  (lisp-unit2:assert-eql #\h (read-char s nil nil)))))

    (with-input-from-string (s input-4)
      (let ((streamer (make-instance 'cstreamer :source s)))
	(destructuring-bind (status list) (filterate streamer matcher)
	  (lisp-unit2:assert-eql 'filtered status)
	  (lisp-unit2:assert-equal (string-to-list input-4) list)
	  (lisp-unit2:assert-eql nil (read-char s nil nil)))))

    (with-input-from-string (s input-5)
      (let ((streamer (make-instance 'cstreamer :source s)))
	(destructuring-bind (status list) (filterate streamer matcher)
	  (lisp-unit2:assert-eql 'filtered status)
	  (lisp-unit2:assert-equal (string-to-list input-4) list)
	  (lisp-unit2:assert-eql #\- (read-char s nil nil)))))

    (with-input-from-string (s input-6)
      (let ((streamer (make-instance 'cstreamer :source s)))
	(destructuring-bind (status list) (filterate streamer matcher)
	  (lisp-unit2:assert-eql 'not-filtered status)
	  (lisp-unit2:assert-equal nil list)
	  (lisp-unit2:assert-eql #\a (read-char s nil nil)))))

    (with-input-from-string (s input-7)
      (let ((streamer (make-instance 'cstreamer :source s)))
	(destructuring-bind (status list) (filterate streamer matcher)
	  (lisp-unit2:assert-eql 'not-filtered status)
	  (lisp-unit2:assert-equal nil list)
	  (lisp-unit2:assert-eql #\a (read-char s nil nil)))))

    (with-input-from-string (s input-8)
      (let ((streamer (make-instance 'cstreamer :source s)))
	(destructuring-bind (status list) (filterate streamer matcher)
	  (lisp-unit2:assert-eql 'not-filtered status)
	  (lisp-unit2:assert-equal nil list)
	  (lisp-unit2:assert-eql #\a (read-char s nil nil)))))

    (with-input-from-string (s input-9)
      (let ((streamer (make-instance 'cstreamer :source s)))
	(destructuring-bind (status list) (filterate streamer matcher)
	  (lisp-unit2:assert-eql 'not-filtered status)
	  (lisp-unit2:assert-equal nil list)
	  (lisp-unit2:assert-eql #\h (read-char s nil nil)))))))
