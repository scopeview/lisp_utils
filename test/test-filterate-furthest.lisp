(in-package :utils-test)

(lisp-unit2:define-test utils-test::filterate-furthest--filterate-furthest
    (:tags '(utils-test::tag-filterate-furthest))
  (let* (;; (input-1 nil)
	 (input-2 "")
	 (input-3 " ")
	 (input-4 "  ")
	 (input-5 "  h")
	 (input-6 "a")
	 (input-7 "a ")
	 (input-8 "a  b")
	 (matcher (make-matcher :for-each-single-char-test #'isspace)))
    ;; (lisp-unit2:assert-equal 'partial-match (match pattern input-1))
    (with-input-from-string (s input-2)
      (let ((streamer (make-instance 'cstreamer :source s)))
	(destructuring-bind (status list) (filterate-furthest streamer matcher)
	  (lisp-unit2:assert-equal 'not-filtered status)
	  (lisp-unit2:assert-equal nil list)
	  (lisp-unit2:assert-equal nil (read-char s nil nil)))))

    (with-input-from-string (s input-3)
      (let ((streamer (make-instance 'cstreamer :source s)))
	(destructuring-bind (status list) (filterate-furthest streamer matcher)
	  (lisp-unit2:assert-equal 'filtered status)
	  (lisp-unit2:assert-equal (string-to-list " ") list)
	  (lisp-unit2:assert-equal nil (read-char s nil nil)))))

    (with-input-from-string (s input-4)
      (let ((streamer (make-instance 'cstreamer :source s)))
	(destructuring-bind (status list) (filterate-furthest streamer matcher)
	  (lisp-unit2:assert-equal 'filtered status)
	  (lisp-unit2:assert-equal (string-to-list "  ") list)
	  (lisp-unit2:assert-equal nil (read-char s nil nil)))))

    (with-input-from-string (s input-5)
      (let ((streamer (make-instance 'cstreamer :source s)))
	(destructuring-bind (status list) (filterate-furthest streamer matcher)
	  (lisp-unit2:assert-equal 'filtered status)
	  (lisp-unit2:assert-equal (string-to-list "  ") list)
	  (lisp-unit2:assert-equal #\h (read-char s nil nil)))))

    (with-input-from-string (s input-6)
      (let ((streamer (make-instance 'cstreamer :source s)))
	(destructuring-bind (status list) (filterate-furthest streamer matcher)
	  (lisp-unit2:assert-equal 'not-filtered status)
	  (lisp-unit2:assert-equal nil list)
	  (lisp-unit2:assert-equal #\a (read-char s nil nil)))))

    (with-input-from-string (s input-7)
      (let ((streamer (make-instance 'cstreamer :source s)))
	(destructuring-bind (status list) (filterate-furthest streamer matcher)
	  (lisp-unit2:assert-equal 'not-filtered status)
	  (lisp-unit2:assert-equal nil list)
	  (lisp-unit2:assert-equal #\a (read-char s nil nil)))))

    (with-input-from-string (s input-8)
      (let ((streamer (make-instance 'cstreamer :source s)))
	(destructuring-bind (status list) (filterate-furthest streamer matcher)
	  (lisp-unit2:assert-equal 'not-filtered status)
	  (lisp-unit2:assert-equal nil list)
	  (lisp-unit2:assert-equal #\a (read-char s nil nil)))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; complex test
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(lisp-unit2:define-test utils-test::filterate-furthest--filterate-furthest--complex
    (:tags '(utils-test::tag-filterate-furthest))
  (labels ((make-matcher-from-string (string)
	     (make-matcher :string-pattern string))
	   (multiple-matcher (input)
	     (let* ((pattern-list '("a" "key" "b" "keyword"))
		    (matcher-list (mapcar #'make-matcher-from-string pattern-list))
		    (match-result-list (mapcar #'(lambda (matcher)
						   (funcall matcher input)) matcher-list)))
	       (cond
		 ((find-if #'(lambda (result) (equal 'full-match result)) match-result-list) 'full-match)
		 ((find-if #'(lambda (result) (equal 'partial-match result)) match-result-list) 'partial-match)
		 (t 'not-match)))))
    (let* ((input "keyword world"))
      (with-input-from-string (s input)
	(let ((streamer (make-instance 'cstreamer :source s)))
	  (destructuring-bind (status list) (filterate-furthest streamer #'multiple-matcher)
	    (lisp-unit2:assert-equal 'filtered status)
	    (lisp-unit2:assert-equal (string-to-list "keyword") list)
	    (lisp-unit2:assert-equal #\space (read-char s nil nil))))))))
