(in-package :utils-test)

(lisp-unit2:define-test utils-test::match--match-string-pattern
    (:tags '(utils-test::tag-match))
  (let ((pattern (string-to-list "hi"))
	;; (input-1 nil)
	;; (input-2 "")
	(input-3 (string-to-list "h"))
	(input-4 (string-to-list "hi"))
	(input-5 (string-to-list "hi--"))
	(input-6 (string-to-list "a"))
	(input-7 (string-to-list "ab"))
	(input-8 (string-to-list "abc")))
    ;; (lisp-unit2:assert-eql 'partial-match (match pattern input-1))
    ;; (lisp-unit2:assert-eql 'partial-match (match pattern input-2))
    (lisp-unit2:assert-eql 'partial-match (match input-3 :string-pattern pattern))
    (lisp-unit2:assert-eql 'full-match (match input-4 :string-pattern pattern))
    (lisp-unit2:assert-eql 'over-match (match input-5 :string-pattern pattern))
    (lisp-unit2:assert-eql 'not-match (match input-6 :string-pattern pattern))
    (lisp-unit2:assert-eql 'not-match (match input-7 :string-pattern pattern))
    (lisp-unit2:assert-eql 'not-match (match input-8 :string-pattern pattern))))

(lisp-unit2:define-test utils-test::match--match-for-each-single-char-test
    (:tags '(utils-test::tag-match))
  (let ((list-1 '(#\space #\2 #\3))
	  (list-2 '(#\1 #\space #\3))
	  (list-3 '(#\1 #\2 #\space))
	  (list-4 '(#\space #\2 #\space))
	  (list-5 '(#\1 #\2 #\3))
	  (list-6 '(#\space #\space #\space)))
      (lisp-unit2:assert-equal 'not-match (match list-1 :for-each-single-char-test #'isspace))
      (lisp-unit2:assert-equal 'not-match (match list-2 :for-each-single-char-test #'isspace))
      (lisp-unit2:assert-equal 'not-match (match list-3 :for-each-single-char-test #'isspace))
      (lisp-unit2:assert-equal 'not-match (match list-4 :for-each-single-char-test #'isspace))
      (lisp-unit2:assert-equal 'not-match (match list-5 :for-each-single-char-test #'isspace))
      (lisp-unit2:assert-equal 'full-match (match list-6 :for-each-single-char-test #'isspace))))
